var TextRight;
(function (TextRight) {
    var Internal;
    (function (Internal) {
        // categories taken from https://github.com/reyesr/javascript-unicode/tree/master/src
        // under the Apache 2.0 License http://www.apache.org/licenses/LICENSE-2.0.
        var categ_letters_data = [[65, 90], [97, 122], 170, 181, 186, [192, 214], [216, 246], [248, 705], [710, 721], [736, 740], 748, 750, [880, 884], [886, 887], [890, 893], 902, [904, 906], 908, [910, 929], [931, 1013], [1015, 1153], [1162, 1319], [1329, 1366], 1369, [1377, 1415], [1488, 1514], [1520, 1522], [1568, 1610], [1646, 1647], [1649, 1747], 1749, [1765, 1766], [1774, 1775], [1786, 1788], 1791, 1808, [1810, 1839], [1869, 1957], 1969, [1994, 2026], [2036, 2037], 2042, [2048, 2069], 2074, 2084, 2088, [2112, 2136], 2208, [2210, 2220], [2308, 2361], 2365, 2384, [2392, 2401], [2417, 2423], [2425, 2431], [2437, 2444], [2447, 2448], [2451, 2472], [2474, 2480], 2482, [2486, 2489], 2493, 2510, [2524, 2525], [2527, 2529], [2544, 2545], [2565, 2570], [2575, 2576], [2579, 2600], [2602, 2608], [2610, 2611], [2613, 2614], [2616, 2617], [2649, 2652], 2654, [2674, 2676], [2693, 2701], [2703, 2705], [2707, 2728], [2730, 2736], [2738, 2739], [2741, 2745], 2749, 2768, [2784, 2785], [2821, 2828], [2831, 2832], [2835, 2856], [2858, 2864], [2866, 2867], [2869, 2873], 2877, [2908, 2909], [2911, 2913], 2929, 2947, [2949, 2954], [2958, 2960], [2962, 2965], [2969, 2970], 2972, [2974, 2975], [2979, 2980], [2984, 2986], [2990, 3001], 3024, [3077, 3084], [3086, 3088], [3090, 3112], [3114, 3123], [3125, 3129], 3133, [3160, 3161], [3168, 3169], [3205, 3212], [3214, 3216], [3218, 3240], [3242, 3251], [3253, 3257], 3261, 3294, [3296, 3297], [3313, 3314], [3333, 3340], [3342, 3344], [3346, 3386], 3389, 3406, [3424, 3425], [3450, 3455], [3461, 3478], [3482, 3505], [3507, 3515], 3517, [3520, 3526], [3585, 3632], [3634, 3635], [3648, 3654], [3713, 3714], 3716, [3719, 3720], 3722, 3725, [3732, 3735], [3737, 3743], [3745, 3747], 3749, 3751, [3754, 3755], [3757, 3760], [3762, 3763], 3773, [3776, 3780], 3782, [3804, 3807], 3840, [3904, 3911], [3913, 3948], [3976, 3980], [4096, 4138], 4159, [4176, 4181], [4186, 4189], 4193, [4197, 4198], [4206, 4208], [4213, 4225], 4238, [4256, 4293], 4295, 4301, [4304, 4346], [4348, 4680], [4682, 4685], [4688, 4694], 4696, [4698, 4701], [4704, 4744], [4746, 4749], [4752, 4784], [4786, 4789], [4792, 4798], 4800, [4802, 4805], [4808, 4822], [4824, 4880], [4882, 4885], [4888, 4954], [4992, 5007], [5024, 5108], [5121, 5740], [5743, 5759], [5761, 5786], [5792, 5866], [5888, 5900], [5902, 5905], [5920, 5937], [5952, 5969], [5984, 5996], [5998, 6000], [6016, 6067], 6103, 6108, [6176, 6263], [6272, 6312], 6314, [6320, 6389], [6400, 6428], [6480, 6509], [6512, 6516], [6528, 6571], [6593, 6599], [6656, 6678], [6688, 6740], 6823, [6917, 6963], [6981, 6987], [7043, 7072], [7086, 7087], [7098, 7141], [7168, 7203], [7245, 7247], [7258, 7293], [7401, 7404], [7406, 7409], [7413, 7414], [7424, 7615], [7680, 7957], [7960, 7965], [7968, 8005], [8008, 8013], [8016, 8023], 8025, 8027, 8029, [8031, 8061], [8064, 8116], [8118, 8124], 8126, [8130, 8132], [8134, 8140], [8144, 8147], [8150, 8155], [8160, 8172], [8178, 8180], [8182, 8188], 8305, 8319, [8336, 8348], 8450, 8455, [8458, 8467], 8469, [8473, 8477], 8484, 8486, 8488, [8490, 8493], [8495, 8505], [8508, 8511], [8517, 8521], 8526, [8579, 8580], [11264, 11310], [11312, 11358], [11360, 11492], [11499, 11502], [11506, 11507], [11520, 11557], 11559, 11565, [11568, 11623], 11631, [11648, 11670], [11680, 11686], [11688, 11694], [11696, 11702], [11704, 11710], [11712, 11718], [11720, 11726], [11728, 11734], [11736, 11742], 11823, [12293, 12294], [12337, 12341], [12347, 12348], [12353, 12438], [12445, 12447], [12449, 12538], [12540, 12543], [12549, 12589], [12593, 12686], [12704, 12730], [12784, 12799], 13312, 19893, 19968, 40908, [40960, 42124], [42192, 42237], [42240, 42508], [42512, 42527], [42538, 42539], [42560, 42606], [42623, 42647], [42656, 42725], [42775, 42783], [42786, 42888], [42891, 42894], [42896, 42899], [42912, 42922], [43000, 43009], [43011, 43013], [43015, 43018], [43020, 43042], [43072, 43123], [43138, 43187], [43250, 43255], 43259, [43274, 43301], [43312, 43334], [43360, 43388], [43396, 43442], 43471, [43520, 43560], [43584, 43586], [43588, 43595], [43616, 43638], 43642, [43648, 43695], 43697, [43701, 43702], [43705, 43709], 43712, 43714, [43739, 43741], [43744, 43754], [43762, 43764], [43777, 43782], [43785, 43790], [43793, 43798], [43808, 43814], [43816, 43822], [43968, 44002], 44032, 55203, [55216, 55238], [55243, 55291], [63744, 64109], [64112, 64217], [64256, 64262], [64275, 64279], 64285, [64287, 64296], [64298, 64310], [64312, 64316], 64318, [64320, 64321], [64323, 64324], [64326, 64433], [64467, 64829], [64848, 64911], [64914, 64967], [65008, 65019], [65136, 65140], [65142, 65276], [65313, 65338], [65345, 65370], [65382, 65470], [65474, 65479], [65482, 65487], [65490, 65495], [65498, 65500], [65536, 65547], [65549, 65574], [65576, 65594], [65596, 65597], [65599, 65613], [65616, 65629], [65664, 65786], [66176, 66204], [66208, 66256], [66304, 66334], [66352, 66368], [66370, 66377], [66432, 66461], [66464, 66499], [66504, 66511], [66560, 66717], [67584, 67589], 67592, [67594, 67637], [67639, 67640], 67644, [67647, 67669], [67840, 67861], [67872, 67897], [67968, 68023], [68030, 68031], 68096, [68112, 68115], [68117, 68119], [68121, 68147], [68192, 68220], [68352, 68405], [68416, 68437], [68448, 68466], [68608, 68680], [69635, 69687], [69763, 69807], [69840, 69864], [69891, 69926], [70019, 70066], [70081, 70084], [71296, 71338], [73728, 74606], [77824, 78894], [92160, 92728], [93952, 94020], 94032, [94099, 94111], [110592, 110593], [119808, 119892], [119894, 119964], [119966, 119967], 119970, [119973, 119974], [119977, 119980], [119982, 119993], 119995, [119997, 120003], [120005, 120069], [120071, 120074], [120077, 120084], [120086, 120092], [120094, 120121], [120123, 120126], [120128, 120132], 120134, [120138, 120144], [120146, 120485], [120488, 120512], [120514, 120538], [120540, 120570], [120572, 120596], [120598, 120628], [120630, 120654], [120656, 120686], [120688, 120712], [120714, 120744], [120746, 120770], [120772, 120779], [126464, 126467], [126469, 126495], [126497, 126498], 126500, 126503, [126505, 126514], [126516, 126519], 126521, 126523, 126530, 126535, 126537, 126539, [126541, 126543], [126545, 126546], 126548, 126551, 126553, 126555, 126557, 126559, [126561, 126562], 126564, [126567, 126570], [126572, 126578], [126580, 126583], [126585, 126588], 126590, [126592, 126601], [126603, 126619], [126625, 126627], [126629, 126633], [126635, 126651], 131072, 173782, 173824, 177972, 177984, 178205, [194560, 195101]];
        var categ_punct_data = [[33, 35], [37, 42], [44, 47], [58, 59], [63, 64], [91, 93], 95, 123, 125, 161, 167, 171, [182, 183], 187, 191, 894, 903, [1370, 1375], [1417, 1418], 1470, 1472, 1475, 1478, [1523, 1524], [1545, 1546], [1548, 1549], 1563, [1566, 1567], [1642, 1645], 1748, [1792, 1805], [2039, 2041], [2096, 2110], 2142, [2404, 2405], 2416, 2800, 3572, 3663, [3674, 3675], [3844, 3858], 3860, [3898, 3901], 3973, [4048, 4052], [4057, 4058], [4170, 4175], 4347, [4960, 4968], 5120, [5741, 5742], [5787, 5788], [5867, 5869], [5941, 5942], [6100, 6102], [6104, 6106], [6144, 6154], [6468, 6469], [6686, 6687], [6816, 6822], [6824, 6829], [7002, 7008], [7164, 7167], [7227, 7231], [7294, 7295], [7360, 7367], 7379, [8208, 8231], [8240, 8259], [8261, 8273], [8275, 8286], [8317, 8318], [8333, 8334], [9001, 9002], [10088, 10101], [10181, 10182], [10214, 10223], [10627, 10648], [10712, 10715], [10748, 10749], [11513, 11516], [11518, 11519], 11632, [11776, 11822], [11824, 11835], [12289, 12291], [12296, 12305], [12308, 12319], 12336, 12349, 12448, 12539, [42238, 42239], [42509, 42511], 42611, 42622, [42738, 42743], [43124, 43127], [43214, 43215], [43256, 43258], [43310, 43311], 43359, [43457, 43469], [43486, 43487], [43612, 43615], [43742, 43743], [43760, 43761], 44011, [64830, 64831], [65040, 65049], [65072, 65106], [65108, 65121], 65123, 65128, [65130, 65131], [65281, 65283], [65285, 65290], [65292, 65295], [65306, 65307], [65311, 65312], [65339, 65341], 65343, 65371, 65373, [65375, 65381], [65792, 65794], 66463, 66512, 67671, 67871, 67903, [68176, 68184], 68223, [68409, 68415], [69703, 69709], [69819, 69820], [69822, 69825], [69952, 69955], [70085, 70088], [74864, 74867]];
        // TODO determine if it would be better to do an array search similar to the unicode
        // library documented at the library below (which is the same one that the category
        // arrays above originated.
        // https://github.com/reyesr/javascript-unicode/blob/master/src/unicode.js
        /**
         * Convert a number into a 4-character wide base16 string (of the form XXXX)
         */
        function toHex(value) {
            var hex = value.toString(16);
            while (hex.length < 4) {
                hex = "0" + hex;
            }
            return hex;
        }
        /**
         * Convert either a number or an array consisting of two elements into a regex like
         * match for matching the numbers passed in.  For example, if 17 is passed it, it should
         * generate '\u0011', if [17, 19] is passed in, it should generate '[\u0011-\u0013]'.
         */
        function toCharacterRange(part) {
            if (Array.isArray(part)) {
                var arrData = part;
                return "[" + "\\u" + toHex(arrData[0]) + "-" + "\\u" + toHex(arrData[1]) + "]";
            }
            else {
                var numData = part;
                return toHex(numData);
            }
        }
        /**
         * Convert the data array in a regex which can be used to test if a character matches
         * the given character ranges.
         */
        function convertArrayCharacterClassToRegex(data) {
            var strRegex = data.map(toCharacterRange).join("|");
            return new RegExp(strRegex);
        }
        /**
         * Determines the category that a character is part of, for navigation purposes like
         * determining where one word ends and another begins.
         */
        var CharacterCategorizer = (function () {
            function CharacterCategorizer() {
                this.letterRegex = convertArrayCharacterClassToRegex(categ_letters_data);
                this.punctuationRegex = convertArrayCharacterClassToRegex(categ_punct_data);
            }
            /**
             * Categorize the given character.
             * @param {string} char The character to categorize.
             * @return A arbitrary number that indicates the category of the character. For example,
             *         letters should be on number, punctuation should be another number.  Positive
             *         numbers indicate that the category is important and should not be skipped,
             *         negate numbers indicate that the letter is unimportant and should be ignored if
             *         navigating through text.
             */
            CharacterCategorizer.prototype.categorize = function (char) {
                if (this.letterRegex.test(char)) {
                    return 1;
                }
                else if (this.punctuationRegex.test(char)) {
                    return 2;
                }
                else {
                    return -1;
                }
            };
            /**
             * Singleton for the class
             */
            CharacterCategorizer.instance = new CharacterCategorizer();
            return CharacterCategorizer;
        })();
        Internal.CharacterCategorizer = CharacterCategorizer;
    })(Internal = TextRight.Internal || (TextRight.Internal = {}));
})(TextRight || (TextRight = {}));
//# sourceMappingURL=CharacterCategorizer.js.map